import { Opaque, SafeDictionary } from 'ts-essentials';
export declare enum NetworkID {
    MAINNET = 1,
    HOLESKY = 17000,
    SEPOLIA = 11155111,
    GNOSIS = 100,
    BASE = 8453,
    BSC = 56,
    OPTIMISTIC_ETHEREUM = 10,
    POLYGON = 137,
    ARBITRUM_ONE = 42161,
    AVALANCHE = 43114,
    CELO = 42220
}
export declare const networkIDtoSymbol: {
    readonly 1: "mainnet";
    readonly 17000: "holesky";
    readonly 11155111: "sepolia";
    readonly 100: "gnosis";
    readonly 8453: "base";
    readonly 56: "bsc";
    readonly 10: "optimism";
    readonly 137: "polygon";
    readonly 42161: "arbitrumOne";
    readonly 43114: "avalanche";
    readonly 42220: "celo";
};
export type UserProvidedNetworkSymbol = Opaque<string, 'UserProvidedNetworkSymbol'>;
export declare const UserProvidedNetworkSymbol: (s: string) => UserProvidedNetworkSymbol;
export declare function isUserProvidedNetwork(symbol: NetworkSymbol, userNetworks: Record<UserProvidedNetworkSymbol, string | number | undefined>): symbol is UserProvidedNetworkSymbol;
export type PredefinedNetworkSymbol = (typeof networkIDtoSymbol)[keyof typeof networkIDtoSymbol];
export type NetworkSymbol = UserProvidedNetworkSymbol | PredefinedNetworkSymbol;
export declare const symbolToNetworkId: SafeDictionary<NetworkID, PredefinedNetworkSymbol>;
