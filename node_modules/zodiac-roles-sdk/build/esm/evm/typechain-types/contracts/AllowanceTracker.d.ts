import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common";
export interface AllowanceTrackerInterface extends Interface {
    getFunction(nameOrSignature: "allowances" | "avatar" | "consumed" | "disableModule" | "enableModule" | "execTransactionFromModule" | "execTransactionFromModuleReturnData" | "getModulesPaginated" | "invalidate" | "isModuleEnabled" | "moduleTxHash" | "owner" | "renounceOwnership" | "setAvatar" | "setTarget" | "setUp" | "target" | "transferOwnership"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "AvatarSet" | "ConsumeAllowance" | "DisabledModule" | "EnabledModule" | "ExecutionFromModuleFailure" | "ExecutionFromModuleSuccess" | "HashExecuted" | "HashInvalidated" | "Initialized" | "OwnershipTransferred" | "TargetSet"): EventFragment;
    encodeFunctionData(functionFragment: "allowances", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "avatar", values?: undefined): string;
    encodeFunctionData(functionFragment: "consumed", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "disableModule", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "enableModule", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "execTransactionFromModule", values: [AddressLike, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "execTransactionFromModuleReturnData", values: [AddressLike, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getModulesPaginated", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "invalidate", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "isModuleEnabled", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "moduleTxHash", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setAvatar", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setTarget", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setUp", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "target", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "allowances", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "avatar", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "consumed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "disableModule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enableModule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execTransactionFromModule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execTransactionFromModuleReturnData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getModulesPaginated", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "invalidate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isModuleEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "moduleTxHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
export declare namespace AvatarSetEvent {
    type InputTuple = [
        previousAvatar: AddressLike,
        newAvatar: AddressLike
    ];
    type OutputTuple = [previousAvatar: string, newAvatar: string];
    interface OutputObject {
        previousAvatar: string;
        newAvatar: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ConsumeAllowanceEvent {
    type InputTuple = [
        allowanceKey: BytesLike,
        consumed: BigNumberish,
        newBalance: BigNumberish
    ];
    type OutputTuple = [
        allowanceKey: string,
        consumed: bigint,
        newBalance: bigint
    ];
    interface OutputObject {
        allowanceKey: string;
        consumed: bigint;
        newBalance: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace DisabledModuleEvent {
    type InputTuple = [module: AddressLike];
    type OutputTuple = [module: string];
    interface OutputObject {
        module: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace EnabledModuleEvent {
    type InputTuple = [module: AddressLike];
    type OutputTuple = [module: string];
    interface OutputObject {
        module: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ExecutionFromModuleFailureEvent {
    type InputTuple = [module: AddressLike];
    type OutputTuple = [module: string];
    interface OutputObject {
        module: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ExecutionFromModuleSuccessEvent {
    type InputTuple = [module: AddressLike];
    type OutputTuple = [module: string];
    interface OutputObject {
        module: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace HashExecutedEvent {
    type InputTuple = [arg0: BytesLike];
    type OutputTuple = [arg0: string];
    interface OutputObject {
        arg0: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace HashInvalidatedEvent {
    type InputTuple = [arg0: BytesLike];
    type OutputTuple = [arg0: string];
    interface OutputObject {
        arg0: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace InitializedEvent {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace OwnershipTransferredEvent {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace TargetSetEvent {
    type InputTuple = [
        previousTarget: AddressLike,
        newTarget: AddressLike
    ];
    type OutputTuple = [previousTarget: string, newTarget: string];
    interface OutputObject {
        previousTarget: string;
        newTarget: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface AllowanceTracker extends BaseContract {
    connect(runner?: ContractRunner | null): AllowanceTracker;
    waitForDeployment(): Promise<this>;
    interface: AllowanceTrackerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    allowances: TypedContractMethod<[
        arg0: BytesLike
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            refill: bigint;
            maxRefill: bigint;
            period: bigint;
            balance: bigint;
            timestamp: bigint;
        }
    ], "view">;
    avatar: TypedContractMethod<[], [string], "view">;
    consumed: TypedContractMethod<[
        arg0: AddressLike,
        arg1: BytesLike
    ], [
        boolean
    ], "view">;
    disableModule: TypedContractMethod<[
        prevModule: AddressLike,
        module: AddressLike
    ], [
        void
    ], "nonpayable">;
    enableModule: TypedContractMethod<[
        module: AddressLike
    ], [
        void
    ], "nonpayable">;
    execTransactionFromModule: TypedContractMethod<[
        to: AddressLike,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    execTransactionFromModuleReturnData: TypedContractMethod<[
        to: AddressLike,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish
    ], [
        [boolean, string] & {
            success: boolean;
            returnData: string;
        }
    ], "nonpayable">;
    getModulesPaginated: TypedContractMethod<[
        start: AddressLike,
        pageSize: BigNumberish
    ], [
        [string[], string] & {
            array: string[];
            next: string;
        }
    ], "view">;
    invalidate: TypedContractMethod<[hash: BytesLike], [void], "nonpayable">;
    isModuleEnabled: TypedContractMethod<[
        _module: AddressLike
    ], [
        boolean
    ], "view">;
    moduleTxHash: TypedContractMethod<[
        data: BytesLike,
        salt: BytesLike
    ], [
        string
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    setAvatar: TypedContractMethod<[_avatar: AddressLike], [void], "nonpayable">;
    setTarget: TypedContractMethod<[_target: AddressLike], [void], "nonpayable">;
    setUp: TypedContractMethod<[
        initializeParams: BytesLike
    ], [
        void
    ], "nonpayable">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "allowances"): TypedContractMethod<[
        arg0: BytesLike
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            refill: bigint;
            maxRefill: bigint;
            period: bigint;
            balance: bigint;
            timestamp: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "avatar"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "consumed"): TypedContractMethod<[
        arg0: AddressLike,
        arg1: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "disableModule"): TypedContractMethod<[
        prevModule: AddressLike,
        module: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "enableModule"): TypedContractMethod<[module: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "execTransactionFromModule"): TypedContractMethod<[
        to: AddressLike,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "execTransactionFromModuleReturnData"): TypedContractMethod<[
        to: AddressLike,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish
    ], [
        [boolean, string] & {
            success: boolean;
            returnData: string;
        }
    ], "nonpayable">;
    getFunction(nameOrSignature: "getModulesPaginated"): TypedContractMethod<[
        start: AddressLike,
        pageSize: BigNumberish
    ], [
        [string[], string] & {
            array: string[];
            next: string;
        }
    ], "view">;
    getFunction(nameOrSignature: "invalidate"): TypedContractMethod<[hash: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "isModuleEnabled"): TypedContractMethod<[_module: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "moduleTxHash"): TypedContractMethod<[data: BytesLike, salt: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "setAvatar"): TypedContractMethod<[_avatar: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setTarget"): TypedContractMethod<[_target: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setUp"): TypedContractMethod<[initializeParams: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "target"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getEvent(key: "AvatarSet"): TypedContractEvent<AvatarSetEvent.InputTuple, AvatarSetEvent.OutputTuple, AvatarSetEvent.OutputObject>;
    getEvent(key: "ConsumeAllowance"): TypedContractEvent<ConsumeAllowanceEvent.InputTuple, ConsumeAllowanceEvent.OutputTuple, ConsumeAllowanceEvent.OutputObject>;
    getEvent(key: "DisabledModule"): TypedContractEvent<DisabledModuleEvent.InputTuple, DisabledModuleEvent.OutputTuple, DisabledModuleEvent.OutputObject>;
    getEvent(key: "EnabledModule"): TypedContractEvent<EnabledModuleEvent.InputTuple, EnabledModuleEvent.OutputTuple, EnabledModuleEvent.OutputObject>;
    getEvent(key: "ExecutionFromModuleFailure"): TypedContractEvent<ExecutionFromModuleFailureEvent.InputTuple, ExecutionFromModuleFailureEvent.OutputTuple, ExecutionFromModuleFailureEvent.OutputObject>;
    getEvent(key: "ExecutionFromModuleSuccess"): TypedContractEvent<ExecutionFromModuleSuccessEvent.InputTuple, ExecutionFromModuleSuccessEvent.OutputTuple, ExecutionFromModuleSuccessEvent.OutputObject>;
    getEvent(key: "HashExecuted"): TypedContractEvent<HashExecutedEvent.InputTuple, HashExecutedEvent.OutputTuple, HashExecutedEvent.OutputObject>;
    getEvent(key: "HashInvalidated"): TypedContractEvent<HashInvalidatedEvent.InputTuple, HashInvalidatedEvent.OutputTuple, HashInvalidatedEvent.OutputObject>;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    getEvent(key: "TargetSet"): TypedContractEvent<TargetSetEvent.InputTuple, TargetSetEvent.OutputTuple, TargetSetEvent.OutputObject>;
    filters: {
        "AvatarSet(address,address)": TypedContractEvent<AvatarSetEvent.InputTuple, AvatarSetEvent.OutputTuple, AvatarSetEvent.OutputObject>;
        AvatarSet: TypedContractEvent<AvatarSetEvent.InputTuple, AvatarSetEvent.OutputTuple, AvatarSetEvent.OutputObject>;
        "ConsumeAllowance(bytes32,uint128,uint128)": TypedContractEvent<ConsumeAllowanceEvent.InputTuple, ConsumeAllowanceEvent.OutputTuple, ConsumeAllowanceEvent.OutputObject>;
        ConsumeAllowance: TypedContractEvent<ConsumeAllowanceEvent.InputTuple, ConsumeAllowanceEvent.OutputTuple, ConsumeAllowanceEvent.OutputObject>;
        "DisabledModule(address)": TypedContractEvent<DisabledModuleEvent.InputTuple, DisabledModuleEvent.OutputTuple, DisabledModuleEvent.OutputObject>;
        DisabledModule: TypedContractEvent<DisabledModuleEvent.InputTuple, DisabledModuleEvent.OutputTuple, DisabledModuleEvent.OutputObject>;
        "EnabledModule(address)": TypedContractEvent<EnabledModuleEvent.InputTuple, EnabledModuleEvent.OutputTuple, EnabledModuleEvent.OutputObject>;
        EnabledModule: TypedContractEvent<EnabledModuleEvent.InputTuple, EnabledModuleEvent.OutputTuple, EnabledModuleEvent.OutputObject>;
        "ExecutionFromModuleFailure(address)": TypedContractEvent<ExecutionFromModuleFailureEvent.InputTuple, ExecutionFromModuleFailureEvent.OutputTuple, ExecutionFromModuleFailureEvent.OutputObject>;
        ExecutionFromModuleFailure: TypedContractEvent<ExecutionFromModuleFailureEvent.InputTuple, ExecutionFromModuleFailureEvent.OutputTuple, ExecutionFromModuleFailureEvent.OutputObject>;
        "ExecutionFromModuleSuccess(address)": TypedContractEvent<ExecutionFromModuleSuccessEvent.InputTuple, ExecutionFromModuleSuccessEvent.OutputTuple, ExecutionFromModuleSuccessEvent.OutputObject>;
        ExecutionFromModuleSuccess: TypedContractEvent<ExecutionFromModuleSuccessEvent.InputTuple, ExecutionFromModuleSuccessEvent.OutputTuple, ExecutionFromModuleSuccessEvent.OutputObject>;
        "HashExecuted(bytes32)": TypedContractEvent<HashExecutedEvent.InputTuple, HashExecutedEvent.OutputTuple, HashExecutedEvent.OutputObject>;
        HashExecuted: TypedContractEvent<HashExecutedEvent.InputTuple, HashExecutedEvent.OutputTuple, HashExecutedEvent.OutputObject>;
        "HashInvalidated(bytes32)": TypedContractEvent<HashInvalidatedEvent.InputTuple, HashInvalidatedEvent.OutputTuple, HashInvalidatedEvent.OutputObject>;
        HashInvalidated: TypedContractEvent<HashInvalidatedEvent.InputTuple, HashInvalidatedEvent.OutputTuple, HashInvalidatedEvent.OutputObject>;
        "Initialized(uint8)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
        "TargetSet(address,address)": TypedContractEvent<TargetSetEvent.InputTuple, TargetSetEvent.OutputTuple, TargetSetEvent.OutputObject>;
        TargetSet: TypedContractEvent<TargetSetEvent.InputTuple, TargetSetEvent.OutputTuple, TargetSetEvent.OutputObject>;
    };
}
