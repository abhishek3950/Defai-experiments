import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common";
export type ConsumptionStruct = {
    allowanceKey: BytesLike;
    balance: BigNumberish;
    consumed: BigNumberish;
};
export type ConsumptionStructOutput = [
    allowanceKey: string,
    balance: bigint,
    consumed: bigint
] & {
    allowanceKey: string;
    balance: bigint;
    consumed: bigint;
};
export interface MockConsumptionsInterface extends Interface {
    getFunction(nameOrSignature: "merge"): FunctionFragment;
    encodeFunctionData(functionFragment: "merge", values: [ConsumptionStruct[], ConsumptionStruct[]]): string;
    decodeFunctionResult(functionFragment: "merge", data: BytesLike): Result;
}
export interface MockConsumptions extends BaseContract {
    connect(runner?: ContractRunner | null): MockConsumptions;
    waitForDeployment(): Promise<this>;
    interface: MockConsumptionsInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    merge: TypedContractMethod<[
        c1: ConsumptionStruct[],
        c2: ConsumptionStruct[]
    ], [
        ConsumptionStructOutput[]
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "merge"): TypedContractMethod<[
        c1: ConsumptionStruct[],
        c2: ConsumptionStruct[]
    ], [
        ConsumptionStructOutput[]
    ], "view">;
    filters: {};
}
