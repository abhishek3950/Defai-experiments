import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../common";
export type ConditionFlatStruct = {
    parent: BigNumberish;
    paramType: BigNumberish;
    operator: BigNumberish;
    compValue: BytesLike;
};
export type ConditionFlatStructOutput = [
    parent: bigint,
    paramType: bigint,
    operator: bigint,
    compValue: string
] & {
    parent: bigint;
    paramType: bigint;
    operator: bigint;
    compValue: string;
};
export interface IntegrityInterface extends Interface {
    getFunction(nameOrSignature: "enforce"): FunctionFragment;
    encodeFunctionData(functionFragment: "enforce", values: [ConditionFlatStruct[]]): string;
    decodeFunctionResult(functionFragment: "enforce", data: BytesLike): Result;
}
export interface Integrity extends BaseContract {
    connect(runner?: ContractRunner | null): Integrity;
    waitForDeployment(): Promise<this>;
    interface: IntegrityInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    enforce: TypedContractMethod<[
        conditions: ConditionFlatStruct[]
    ], [
        void
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "enforce"): TypedContractMethod<[conditions: ConditionFlatStruct[]], [void], "view">;
    filters: {};
}
