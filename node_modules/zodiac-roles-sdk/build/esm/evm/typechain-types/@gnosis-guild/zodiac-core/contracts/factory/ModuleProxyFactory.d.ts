import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../../../common";
export interface ModuleProxyFactoryInterface extends Interface {
    getFunction(nameOrSignature: "deployModule"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "ModuleProxyCreation"): EventFragment;
    encodeFunctionData(functionFragment: "deployModule", values: [AddressLike, BytesLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "deployModule", data: BytesLike): Result;
}
export declare namespace ModuleProxyCreationEvent {
    type InputTuple = [proxy: AddressLike, masterCopy: AddressLike];
    type OutputTuple = [proxy: string, masterCopy: string];
    interface OutputObject {
        proxy: string;
        masterCopy: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface ModuleProxyFactory extends BaseContract {
    connect(runner?: ContractRunner | null): ModuleProxyFactory;
    waitForDeployment(): Promise<this>;
    interface: ModuleProxyFactoryInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    deployModule: TypedContractMethod<[
        masterCopy: AddressLike,
        initializer: BytesLike,
        saltNonce: BigNumberish
    ], [
        string
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "deployModule"): TypedContractMethod<[
        masterCopy: AddressLike,
        initializer: BytesLike,
        saltNonce: BigNumberish
    ], [
        string
    ], "nonpayable">;
    getEvent(key: "ModuleProxyCreation"): TypedContractEvent<ModuleProxyCreationEvent.InputTuple, ModuleProxyCreationEvent.OutputTuple, ModuleProxyCreationEvent.OutputObject>;
    filters: {
        "ModuleProxyCreation(address,address)": TypedContractEvent<ModuleProxyCreationEvent.InputTuple, ModuleProxyCreationEvent.OutputTuple, ModuleProxyCreationEvent.OutputObject>;
        ModuleProxyCreation: TypedContractEvent<ModuleProxyCreationEvent.InputTuple, ModuleProxyCreationEvent.OutputTuple, ModuleProxyCreationEvent.OutputObject>;
    };
}
