import { keccak256, ParamType, toUtf8Bytes } from "ethers";
import { ExecutionOptions as ExecutionOptionsEnum } from "zodiac-roles-deployments";
import { conditionAddress, normalizeCondition } from "../conditions";
export const execOptions = (options) => {
    if (options.send && options.delegatecall)
        return ExecutionOptionsEnum.Both;
    if (options.delegatecall)
        return ExecutionOptionsEnum.DelegateCall;
    if (options.send)
        return ExecutionOptionsEnum.Send;
    return ExecutionOptionsEnum.None;
};
const sighash = (signature) => keccak256(toUtf8Bytes(signature)).substring(0, 10);
export const coercePermission = (permission) => {
    if (isFunctionScoped(permission)) {
        return {
            targetAddress: permission.targetAddress.toLowerCase(),
            selector: "selector" in permission
                ? permission.selector.toLowerCase()
                : sighash(permission.signature),
            condition: typeof permission.condition === "function"
                ? permission.condition(ParamType.from("bytes"))
                : permission.condition,
            send: permission.send,
            delegatecall: permission.delegatecall,
        };
    }
    return permission;
};
export const isFunctionScoped = (permission) => {
    return "selector" in permission || "signature" in permission;
};
export const targetId = (permission) => "selector" in permission
    ? `${permission.targetAddress.toLowerCase()}.${permission.selector}`
    : `${permission.targetAddress.toLowerCase()}.*`; // * will be always be sorted before any selector 0x...
export const permissionId = (permission) => {
    const cid = "condition" in permission && permission.condition
        ? conditionAddress(normalizeCondition(permission.condition))
        : "";
    return `${targetId(permission)}:${execOptions(permission)}:${cid}`;
};
