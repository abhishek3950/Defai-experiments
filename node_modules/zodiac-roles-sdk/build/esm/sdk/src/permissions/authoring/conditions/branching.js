import { Operator, ParameterType } from "zodiac-roles-deployments";
import { mapScoping } from "./matches";
/**
 * Passes if any of the branch conditions are true.
 * @param branches conditions to be evaluated
 */
export const or = (...branches) => (abiType) => ({
    paramType: ParameterType.None,
    operator: Operator.Or,
    children: branches.map((branch) => {
        if (branch === undefined) {
            throw new Error("or() branch condition must not be undefined");
        }
        return mapScoping(branch, abiType); // cast is safe because of earlier branch check
    }),
});
/**
 * Passes if all of the branch conditions are true.
 * @param branches conditions to be evaluated
 */
export const and = (...branches) => (abiType) => ({
    paramType: ParameterType.None,
    operator: Operator.And,
    children: branches.map((branch) => {
        if (branch === undefined) {
            throw new Error("and() branch condition must not be undefined");
        }
        return mapScoping(branch, abiType); // cast is safe because of earlier branch check
    }),
});
/**
 * Passes if all branch conditions are false.
 * @param branches conditions to be evaluated
 */
export const nor = (...branches) => (abiType) => ({
    paramType: ParameterType.None,
    operator: Operator.Nor,
    children: branches.map((branch) => {
        if (branch === undefined) {
            throw new Error("nor() branch condition must not be undefined");
        }
        return mapScoping(branch, abiType); // cast is safe because of earlier branch check
    }),
});
