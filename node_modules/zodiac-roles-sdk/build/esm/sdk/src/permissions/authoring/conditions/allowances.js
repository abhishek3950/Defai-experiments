import { ParamType } from "ethers";
import { Operator, ParameterType } from "zodiac-roles-deployments";
import { encodeAbiParameters } from "../../../utils/encodeAbiParameters";
export const withinAllowance = (allowanceKey) => (abiType) => {
    const type = ParamType.from(abiType);
    if (!type.type.startsWith("uint")) {
        throw new Error("`withinAllowance` is only supported for uint params");
    }
    return {
        paramType: ParameterType.Static,
        operator: Operator.WithinAllowance,
        compValue: encodeAbiParameters(["bytes32"], [allowanceKey]),
    };
};
export const callWithinAllowance = (allowanceKey) => () => {
    return {
        paramType: ParameterType.None,
        operator: Operator.CallWithinAllowance,
        compValue: encodeAbiParameters(["bytes32"], [allowanceKey]),
    };
};
export const etherWithinAllowance = (allowanceKey) => () => {
    return {
        paramType: ParameterType.None,
        operator: Operator.EtherWithinAllowance,
        compValue: encodeAbiParameters(["bytes32"], [allowanceKey]),
    };
};
