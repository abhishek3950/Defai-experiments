import { ParameterType, Operator } from "zodiac-roles-deployments";
import { encodeAbiParameters } from "../../../utils/encodeAbiParameters";
export const encodeValue = (value, type) => {
    return encodeAbiParameters([type], [value]);
};
export const parameterType = (type) => {
    switch (type.baseType) {
        case "tuple":
            return ParameterType.Tuple;
        case "array":
            return ParameterType.Array;
        case "string":
        case "bytes":
            return ParameterType.Dynamic;
        default:
            return ParameterType.Static;
    }
};
export const describeStructure = (type) => {
    const children = type.arrayChildren
        ? [type.arrayChildren]
        : type.components; // ethers typings are wrong
    return {
        paramType: parameterType(type),
        operator: Operator.Pass,
        children: children && children.length > 0
            ? children.map(describeStructure)
            : undefined,
    };
};
