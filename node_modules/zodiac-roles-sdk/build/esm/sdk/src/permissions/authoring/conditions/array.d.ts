import { ArrayElement, ConditionFunction, Scoping } from "./types";
/**
 * Passes if every element of the array matches the given condition.
 * @param elementScoping The condition on the array elements
 */
export declare const every: <S extends Scoping<ArrayElement<T>>, T extends any[]>(elementScoping: S) => ConditionFunction<T>;
/**
 * Passes if at least one element of the array matches the given condition.
 * @param elementScoping The condition on the array elements
 */
export declare const some: <S extends Scoping<ArrayElement<T>>, T extends any[]>(elementScoping: S) => ConditionFunction<T>;
/**
 * Passes if every element of the array matches one of the given conditions. Every condition must be used at most once.
 * @param elementScopings The conditions on the array elements
 */
export declare const subset: <S extends Scoping<ArrayElement<T>>[], T extends any[]>(elementScopings: S) => ConditionFunction<T>;
