import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common";
export type UnwrappedTransactionStruct = {
    operation: BigNumberish;
    to: AddressLike;
    value: BigNumberish;
    dataLocation: BigNumberish;
    dataSize: BigNumberish;
};
export type UnwrappedTransactionStructOutput = [
    operation: bigint,
    to: string,
    value: bigint,
    dataLocation: bigint,
    dataSize: bigint
] & {
    operation: bigint;
    to: string;
    value: bigint;
    dataLocation: bigint;
    dataSize: bigint;
};
export interface MultiSendUnwrapperInterface extends Interface {
    getFunction(nameOrSignature: "unwrap"): FunctionFragment;
    encodeFunctionData(functionFragment: "unwrap", values: [AddressLike, BigNumberish, BytesLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
}
export interface MultiSendUnwrapper extends BaseContract {
    connect(runner?: ContractRunner | null): MultiSendUnwrapper;
    waitForDeployment(): Promise<this>;
    interface: MultiSendUnwrapperInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    unwrap: TypedContractMethod<[
        arg0: AddressLike,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish
    ], [
        UnwrappedTransactionStructOutput[]
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "unwrap"): TypedContractMethod<[
        arg0: AddressLike,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish
    ], [
        UnwrappedTransactionStructOutput[]
    ], "view">;
    filters: {};
}
