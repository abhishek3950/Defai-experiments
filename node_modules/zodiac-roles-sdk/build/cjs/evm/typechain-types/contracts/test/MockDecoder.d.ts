import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../common";
export declare namespace MockDecoder {
    type IN10Struct = {
        paramType: BigNumberish;
        operator: BigNumberish;
    };
    type IN10StructOutput = [paramType: bigint, operator: bigint] & {
        paramType: bigint;
        operator: bigint;
    };
    type IN9Struct = {
        paramType: BigNumberish;
        operator: BigNumberish;
        children: MockDecoder.IN10Struct[];
    };
    type IN9StructOutput = [
        paramType: bigint,
        operator: bigint,
        children: MockDecoder.IN10StructOutput[]
    ] & {
        paramType: bigint;
        operator: bigint;
        children: MockDecoder.IN10StructOutput[];
    };
    type IN8Struct = {
        paramType: BigNumberish;
        operator: BigNumberish;
        children: MockDecoder.IN9Struct[];
    };
    type IN8StructOutput = [
        paramType: bigint,
        operator: bigint,
        children: MockDecoder.IN9StructOutput[]
    ] & {
        paramType: bigint;
        operator: bigint;
        children: MockDecoder.IN9StructOutput[];
    };
    type IN7Struct = {
        paramType: BigNumberish;
        operator: BigNumberish;
        children: MockDecoder.IN8Struct[];
    };
    type IN7StructOutput = [
        paramType: bigint,
        operator: bigint,
        children: MockDecoder.IN8StructOutput[]
    ] & {
        paramType: bigint;
        operator: bigint;
        children: MockDecoder.IN8StructOutput[];
    };
    type IN6Struct = {
        paramType: BigNumberish;
        operator: BigNumberish;
        children: MockDecoder.IN7Struct[];
    };
    type IN6StructOutput = [
        paramType: bigint,
        operator: bigint,
        children: MockDecoder.IN7StructOutput[]
    ] & {
        paramType: bigint;
        operator: bigint;
        children: MockDecoder.IN7StructOutput[];
    };
    type IN5Struct = {
        paramType: BigNumberish;
        operator: BigNumberish;
        children: MockDecoder.IN6Struct[];
    };
    type IN5StructOutput = [
        paramType: bigint,
        operator: bigint,
        children: MockDecoder.IN6StructOutput[]
    ] & {
        paramType: bigint;
        operator: bigint;
        children: MockDecoder.IN6StructOutput[];
    };
    type IN4Struct = {
        paramType: BigNumberish;
        operator: BigNumberish;
        children: MockDecoder.IN5Struct[];
    };
    type IN4StructOutput = [
        paramType: bigint,
        operator: bigint,
        children: MockDecoder.IN5StructOutput[]
    ] & {
        paramType: bigint;
        operator: bigint;
        children: MockDecoder.IN5StructOutput[];
    };
    type IN3Struct = {
        paramType: BigNumberish;
        operator: BigNumberish;
        children: MockDecoder.IN4Struct[];
    };
    type IN3StructOutput = [
        paramType: bigint,
        operator: bigint,
        children: MockDecoder.IN4StructOutput[]
    ] & {
        paramType: bigint;
        operator: bigint;
        children: MockDecoder.IN4StructOutput[];
    };
    type IN2Struct = {
        paramType: BigNumberish;
        operator: BigNumberish;
        children: MockDecoder.IN3Struct[];
    };
    type IN2StructOutput = [
        paramType: bigint,
        operator: bigint,
        children: MockDecoder.IN3StructOutput[]
    ] & {
        paramType: bigint;
        operator: bigint;
        children: MockDecoder.IN3StructOutput[];
    };
    type IN1Struct = {
        paramType: BigNumberish;
        operator: BigNumberish;
        children: MockDecoder.IN2Struct[];
    };
    type IN1StructOutput = [
        paramType: bigint,
        operator: bigint,
        children: MockDecoder.IN2StructOutput[]
    ] & {
        paramType: bigint;
        operator: bigint;
        children: MockDecoder.IN2StructOutput[];
    };
    type PP6Struct = {
        location: BigNumberish;
        size: BigNumberish;
    };
    type PP6StructOutput = [location: bigint, size: bigint] & {
        location: bigint;
        size: bigint;
    };
    type PP5Struct = {
        location: BigNumberish;
        size: BigNumberish;
        children: MockDecoder.PP6Struct[];
    };
    type PP5StructOutput = [
        location: bigint,
        size: bigint,
        children: MockDecoder.PP6StructOutput[]
    ] & {
        location: bigint;
        size: bigint;
        children: MockDecoder.PP6StructOutput[];
    };
    type PP4Struct = {
        location: BigNumberish;
        size: BigNumberish;
        children: MockDecoder.PP5Struct[];
    };
    type PP4StructOutput = [
        location: bigint,
        size: bigint,
        children: MockDecoder.PP5StructOutput[]
    ] & {
        location: bigint;
        size: bigint;
        children: MockDecoder.PP5StructOutput[];
    };
    type PP3Struct = {
        location: BigNumberish;
        size: BigNumberish;
        children: MockDecoder.PP4Struct[];
    };
    type PP3StructOutput = [
        location: bigint,
        size: bigint,
        children: MockDecoder.PP4StructOutput[]
    ] & {
        location: bigint;
        size: bigint;
        children: MockDecoder.PP4StructOutput[];
    };
    type PP2Struct = {
        location: BigNumberish;
        size: BigNumberish;
        children: MockDecoder.PP3Struct[];
    };
    type PP2StructOutput = [
        location: bigint,
        size: bigint,
        children: MockDecoder.PP3StructOutput[]
    ] & {
        location: bigint;
        size: bigint;
        children: MockDecoder.PP3StructOutput[];
    };
    type PP1Struct = {
        location: BigNumberish;
        size: BigNumberish;
        children: MockDecoder.PP2Struct[];
    };
    type PP1StructOutput = [
        location: bigint,
        size: bigint,
        children: MockDecoder.PP2StructOutput[]
    ] & {
        location: bigint;
        size: bigint;
        children: MockDecoder.PP2StructOutput[];
    };
}
export interface MockDecoderInterface extends Interface {
    getFunction(nameOrSignature: "inspect" | "pluck"): FunctionFragment;
    encodeFunctionData(functionFragment: "inspect", values: [BytesLike, MockDecoder.IN1Struct]): string;
    encodeFunctionData(functionFragment: "pluck", values: [BytesLike, BigNumberish, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "inspect", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pluck", data: BytesLike): Result;
}
export interface MockDecoder extends BaseContract {
    connect(runner?: ContractRunner | null): MockDecoder;
    waitForDeployment(): Promise<this>;
    interface: MockDecoderInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    inspect: TypedContractMethod<[
        data: BytesLike,
        layout: MockDecoder.IN1Struct
    ], [
        MockDecoder.PP1StructOutput
    ], "view">;
    pluck: TypedContractMethod<[
        data: BytesLike,
        offset: BigNumberish,
        size: BigNumberish
    ], [
        string
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "inspect"): TypedContractMethod<[
        data: BytesLike,
        layout: MockDecoder.IN1Struct
    ], [
        MockDecoder.PP1StructOutput
    ], "view">;
    getFunction(nameOrSignature: "pluck"): TypedContractMethod<[
        data: BytesLike,
        offset: BigNumberish,
        size: BigNumberish
    ], [
        string
    ], "view">;
    filters: {};
}
