import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../../../common";
export interface ExecutionTrackerInterface extends Interface {
    getFunction(nameOrSignature: "consumed" | "invalidate"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "HashExecuted" | "HashInvalidated"): EventFragment;
    encodeFunctionData(functionFragment: "consumed", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "invalidate", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "consumed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "invalidate", data: BytesLike): Result;
}
export declare namespace HashExecutedEvent {
    type InputTuple = [arg0: BytesLike];
    type OutputTuple = [arg0: string];
    interface OutputObject {
        arg0: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace HashInvalidatedEvent {
    type InputTuple = [arg0: BytesLike];
    type OutputTuple = [arg0: string];
    interface OutputObject {
        arg0: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface ExecutionTracker extends BaseContract {
    connect(runner?: ContractRunner | null): ExecutionTracker;
    waitForDeployment(): Promise<this>;
    interface: ExecutionTrackerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    consumed: TypedContractMethod<[
        arg0: AddressLike,
        arg1: BytesLike
    ], [
        boolean
    ], "view">;
    invalidate: TypedContractMethod<[hash: BytesLike], [void], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "consumed"): TypedContractMethod<[
        arg0: AddressLike,
        arg1: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "invalidate"): TypedContractMethod<[hash: BytesLike], [void], "nonpayable">;
    getEvent(key: "HashExecuted"): TypedContractEvent<HashExecutedEvent.InputTuple, HashExecutedEvent.OutputTuple, HashExecutedEvent.OutputObject>;
    getEvent(key: "HashInvalidated"): TypedContractEvent<HashInvalidatedEvent.InputTuple, HashInvalidatedEvent.OutputTuple, HashInvalidatedEvent.OutputObject>;
    filters: {
        "HashExecuted(bytes32)": TypedContractEvent<HashExecutedEvent.InputTuple, HashExecutedEvent.OutputTuple, HashExecutedEvent.OutputObject>;
        HashExecuted: TypedContractEvent<HashExecutedEvent.InputTuple, HashExecutedEvent.OutputTuple, HashExecutedEvent.OutputObject>;
        "HashInvalidated(bytes32)": TypedContractEvent<HashInvalidatedEvent.InputTuple, HashInvalidatedEvent.OutputTuple, HashInvalidatedEvent.OutputObject>;
        HashInvalidated: TypedContractEvent<HashInvalidatedEvent.InputTuple, HashInvalidatedEvent.OutputTuple, HashInvalidatedEvent.OutputObject>;
    };
}
