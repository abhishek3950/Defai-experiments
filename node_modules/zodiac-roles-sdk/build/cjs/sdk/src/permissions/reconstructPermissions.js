"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reconstructPermissions = void 0;
const zodiac_roles_deployments_1 = require("zodiac-roles-deployments");
/**
 * The inverse of `processPermissions`: Given a list of allowed targets, reconstruct the list of permissions that would produce it.
 * @param targets Targets that are allowed
 * @returns A set of permissions that produces these targets when processed
 */
const reconstructPermissions = (targets) => {
    return targets.flatMap((target) => {
        if (target.clearance === zodiac_roles_deployments_1.Clearance.None) {
            return [];
        }
        if (target.clearance === zodiac_roles_deployments_1.Clearance.Target) {
            return {
                targetAddress: target.address,
                send: allowsSend(target.executionOptions),
                delegatecall: allowsDelegateCall(target.executionOptions),
            };
        }
        if (target.clearance === zodiac_roles_deployments_1.Clearance.Function) {
            return target.functions
                .map((func) => ({
                targetAddress: target.address,
                selector: func.selector,
                send: allowsSend(func.executionOptions),
                delegatecall: allowsDelegateCall(func.executionOptions),
                condition: !func.wildcarded ? func.condition : undefined,
            }))
                .map(splitFunctionPermission);
        }
        throw new Error(`Unknown clearance ${target.clearance}`);
    });
};
exports.reconstructPermissions = reconstructPermissions;
/** The inverse of mergeFunctionPermissions */
const splitFunctionPermission = (permission) => {
    // only split permissions with top-level OR conditions
    if (permission.condition &&
        permission.condition.operator === zodiac_roles_deployments_1.Operator.Or &&
        permission.condition.children &&
        permission.condition.children.length > 0) {
        permission.condition.children.map((child) => (Object.assign(Object.assign({}, permission), { condition: child })));
    }
    return permission;
};
const allowsSend = (execOptions) => execOptions === zodiac_roles_deployments_1.ExecutionOptions.Send || execOptions === zodiac_roles_deployments_1.ExecutionOptions.Both;
const allowsDelegateCall = (execOptions) => execOptions === zodiac_roles_deployments_1.ExecutionOptions.DelegateCall ||
    execOptions === zodiac_roles_deployments_1.ExecutionOptions.Both;
