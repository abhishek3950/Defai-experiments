"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeFunctionPermissions = void 0;
const zodiac_roles_deployments_1 = require("zodiac-roles-deployments");
const utils_1 = require("./utils");
/**
 * Processes the permissions and merges entries addressing the same target (targetAddress+selector) into a single entry.
 * This is done by merging the conditions using a logical OR.
 * @param permissions The permissions to process
 * @returns The updated permissions
 */
const mergeFunctionPermissions = (permissions) => permissions.reduce((result, entry) => {
    if (!(0, utils_1.isFunctionScoped)(entry)) {
        result.push(Object.assign(Object.assign({}, entry), { targetAddress: entry.targetAddress.toLowerCase() }));
        return result;
    }
    const coercedEntry = (0, utils_1.coercePermission)(entry);
    const matchingEntry = result.find((existingEntry) => (0, utils_1.targetId)(existingEntry) === (0, utils_1.targetId)(coercedEntry));
    if (!matchingEntry) {
        result.push(coercedEntry);
        return result;
    }
    if (!!matchingEntry.send !== !!entry.send ||
        !!matchingEntry.delegatecall !== !!entry.delegatecall) {
        // we don't merge if execution options are different
        result.push(coercedEntry);
        return result;
    }
    // merge conditions into the entry we already have
    matchingEntry.condition = mergeConditions(matchingEntry, coercedEntry);
    return result;
}, []);
exports.mergeFunctionPermissions = mergeFunctionPermissions;
/**
 * @dev Merges two conditions using a logical OR, flattening nested OR conditions. If the conditions are equal, it will still create separate OR branches.
 * These will be pruned later in sanitizeCondition().
 */
const mergeConditions = (a, b) => {
    if (!!a.condition !== !!b.condition) {
        const id = (0, utils_1.targetId)(a);
        console.warn(`Target ${id} is allowed with and without conditions. It will be allowed without conditions.`);
        return undefined;
    }
    if (!a.condition || !b.condition)
        return undefined;
    const aBranches = a.condition.operator === zodiac_roles_deployments_1.Operator.Or ? a.condition.children : [a.condition];
    const bBranches = b.condition.operator === zodiac_roles_deployments_1.Operator.Or ? b.condition.children : [b.condition];
    return {
        paramType: zodiac_roles_deployments_1.ParameterType.None,
        operator: zodiac_roles_deployments_1.Operator.Or,
        children: [...(aBranches || []), ...(bBranches || [])],
    };
};
