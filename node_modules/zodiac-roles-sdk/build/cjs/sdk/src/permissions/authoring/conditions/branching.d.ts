import { ConditionFunction, Scoping } from "./types";
type ScopingBranches<T> = [Scoping<T>, Scoping<T>, ...Scoping<T>[]];
/**
 * Passes if any of the branch conditions are true.
 * @param branches conditions to be evaluated
 */
export declare const or: <Branches extends ScopingBranches<T>, T>(...branches: Branches) => ConditionFunction<T>;
/**
 * Passes if all of the branch conditions are true.
 * @param branches conditions to be evaluated
 */
export declare const and: <Branches extends ScopingBranches<T>, T>(...branches: Branches) => ConditionFunction<T>;
/**
 * Passes if all branch conditions are false.
 * @param branches conditions to be evaluated
 */
export declare const nor: <Branches extends Scoping<T>[], T>(...branches: Branches) => ConditionFunction<T>;
export {};
