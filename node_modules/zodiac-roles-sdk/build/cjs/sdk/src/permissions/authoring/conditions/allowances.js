"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.etherWithinAllowance = exports.callWithinAllowance = exports.withinAllowance = void 0;
const ethers_1 = require("ethers");
const zodiac_roles_deployments_1 = require("zodiac-roles-deployments");
const encodeAbiParameters_1 = require("../../../utils/encodeAbiParameters");
const withinAllowance = (allowanceKey) => (abiType) => {
    const type = ethers_1.ParamType.from(abiType);
    if (!type.type.startsWith("uint")) {
        throw new Error("`withinAllowance` is only supported for uint params");
    }
    return {
        paramType: zodiac_roles_deployments_1.ParameterType.Static,
        operator: zodiac_roles_deployments_1.Operator.WithinAllowance,
        compValue: (0, encodeAbiParameters_1.encodeAbiParameters)(["bytes32"], [allowanceKey]),
    };
};
exports.withinAllowance = withinAllowance;
const callWithinAllowance = (allowanceKey) => () => {
    return {
        paramType: zodiac_roles_deployments_1.ParameterType.None,
        operator: zodiac_roles_deployments_1.Operator.CallWithinAllowance,
        compValue: (0, encodeAbiParameters_1.encodeAbiParameters)(["bytes32"], [allowanceKey]),
    };
};
exports.callWithinAllowance = callWithinAllowance;
const etherWithinAllowance = (allowanceKey) => () => {
    return {
        paramType: zodiac_roles_deployments_1.ParameterType.None,
        operator: zodiac_roles_deployments_1.Operator.EtherWithinAllowance,
        compValue: (0, encodeAbiParameters_1.encodeAbiParameters)(["bytes32"], [allowanceKey]),
    };
};
exports.etherWithinAllowance = etherWithinAllowance;
