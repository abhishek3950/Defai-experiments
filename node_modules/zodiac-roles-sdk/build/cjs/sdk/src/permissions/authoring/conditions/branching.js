"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nor = exports.and = exports.or = void 0;
const zodiac_roles_deployments_1 = require("zodiac-roles-deployments");
const matches_1 = require("./matches");
/**
 * Passes if any of the branch conditions are true.
 * @param branches conditions to be evaluated
 */
const or = (...branches) => (abiType) => ({
    paramType: zodiac_roles_deployments_1.ParameterType.None,
    operator: zodiac_roles_deployments_1.Operator.Or,
    children: branches.map((branch) => {
        if (branch === undefined) {
            throw new Error("or() branch condition must not be undefined");
        }
        return (0, matches_1.mapScoping)(branch, abiType); // cast is safe because of earlier branch check
    }),
});
exports.or = or;
/**
 * Passes if all of the branch conditions are true.
 * @param branches conditions to be evaluated
 */
const and = (...branches) => (abiType) => ({
    paramType: zodiac_roles_deployments_1.ParameterType.None,
    operator: zodiac_roles_deployments_1.Operator.And,
    children: branches.map((branch) => {
        if (branch === undefined) {
            throw new Error("and() branch condition must not be undefined");
        }
        return (0, matches_1.mapScoping)(branch, abiType); // cast is safe because of earlier branch check
    }),
});
exports.and = and;
/**
 * Passes if all branch conditions are false.
 * @param branches conditions to be evaluated
 */
const nor = (...branches) => (abiType) => ({
    paramType: zodiac_roles_deployments_1.ParameterType.None,
    operator: zodiac_roles_deployments_1.Operator.Nor,
    children: branches.map((branch) => {
        if (branch === undefined) {
            throw new Error("nor() branch condition must not be undefined");
        }
        return (0, matches_1.mapScoping)(branch, abiType); // cast is safe because of earlier branch check
    }),
});
exports.nor = nor;
