"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.subset = exports.some = exports.every = void 0;
const zodiac_roles_deployments_1 = require("zodiac-roles-deployments");
const matches_1 = require("./matches");
/**
 * Passes if every element of the array matches the given condition.
 * @param elementScoping The condition on the array elements
 */
const every = (elementScoping) => (abiType) => {
    if (abiType.baseType !== "array") {
        throw new Error("every() can only be used on array types");
    }
    if (elementScoping === undefined) {
        throw new Error("every() element condition must not be undefined");
    }
    return {
        paramType: zodiac_roles_deployments_1.ParameterType.Array,
        operator: zodiac_roles_deployments_1.Operator.ArrayEvery,
        children: [
            (0, matches_1.mapScoping)(elementScoping, abiType.arrayChildren),
        ],
    };
};
exports.every = every;
/**
 * Passes if at least one element of the array matches the given condition.
 * @param elementScoping The condition on the array elements
 */
const some = (elementScoping) => (abiType) => {
    if (abiType.baseType !== "array") {
        throw new Error("some() can only be used on array types");
    }
    if (elementScoping === undefined) {
        throw new Error("some() element condition must not be undefined");
    }
    return {
        paramType: zodiac_roles_deployments_1.ParameterType.Array,
        operator: zodiac_roles_deployments_1.Operator.ArraySome,
        children: [
            (0, matches_1.mapScoping)(elementScoping, abiType.arrayChildren),
        ],
    };
};
exports.some = some;
/**
 * Passes if every element of the array matches one of the given conditions. Every condition must be used at most once.
 * @param elementScopings The conditions on the array elements
 */
const subset = (elementScopings) => (abiType) => {
    if (abiType.baseType !== "array") {
        throw new Error("subset() can only be used on array types");
    }
    return {
        paramType: zodiac_roles_deployments_1.ParameterType.Array,
        operator: zodiac_roles_deployments_1.Operator.ArraySubset,
        children: elementScopings.map((elementScoping) => {
            if (elementScoping === undefined) {
                throw new Error("subset() element condition must not be undefined");
            }
            return (0, matches_1.mapScoping)(elementScoping, abiType.arrayChildren); // cast is safe because of earlier elementScoping check
        }),
    };
};
exports.subset = subset;
