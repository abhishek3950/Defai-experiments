"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.permissionId = exports.targetId = exports.isFunctionScoped = exports.coercePermission = exports.execOptions = void 0;
const ethers_1 = require("ethers");
const zodiac_roles_deployments_1 = require("zodiac-roles-deployments");
const conditions_1 = require("../conditions");
const execOptions = (options) => {
    if (options.send && options.delegatecall)
        return zodiac_roles_deployments_1.ExecutionOptions.Both;
    if (options.delegatecall)
        return zodiac_roles_deployments_1.ExecutionOptions.DelegateCall;
    if (options.send)
        return zodiac_roles_deployments_1.ExecutionOptions.Send;
    return zodiac_roles_deployments_1.ExecutionOptions.None;
};
exports.execOptions = execOptions;
const sighash = (signature) => (0, ethers_1.keccak256)((0, ethers_1.toUtf8Bytes)(signature)).substring(0, 10);
const coercePermission = (permission) => {
    if ((0, exports.isFunctionScoped)(permission)) {
        return {
            targetAddress: permission.targetAddress.toLowerCase(),
            selector: "selector" in permission
                ? permission.selector.toLowerCase()
                : sighash(permission.signature),
            condition: typeof permission.condition === "function"
                ? permission.condition(ethers_1.ParamType.from("bytes"))
                : permission.condition,
            send: permission.send,
            delegatecall: permission.delegatecall,
        };
    }
    return permission;
};
exports.coercePermission = coercePermission;
const isFunctionScoped = (permission) => {
    return "selector" in permission || "signature" in permission;
};
exports.isFunctionScoped = isFunctionScoped;
const targetId = (permission) => "selector" in permission
    ? `${permission.targetAddress.toLowerCase()}.${permission.selector}`
    : `${permission.targetAddress.toLowerCase()}.*`; // * will be always be sorted before any selector 0x...
exports.targetId = targetId;
const permissionId = (permission) => {
    const cid = "condition" in permission && permission.condition
        ? (0, conditions_1.conditionAddress)((0, conditions_1.normalizeCondition)(permission.condition))
        : "";
    return `${(0, exports.targetId)(permission)}:${(0, exports.execOptions)(permission)}:${cid}`;
};
exports.permissionId = permissionId;
