import OpenAPIBackend from "openapi-backend";
import { OpenAPIV3 } from "openapi-types";
import { Annotation } from "zodiac-roles-deployments";
import { Permission, PermissionCoerced } from "zodiac-roles-sdk";
type DeferencedOpenAPIParameter = Omit<OpenAPIV3.ParameterObject, "schema"> & {
    schema: OpenAPIV3.SchemaObject;
};
export interface Preset {
    permissions: PermissionCoerced[];
    uri: string;
    serverUrl: string;
    apiInfo: OpenAPIV3.InfoObject;
    path: string;
    params: Record<string, string | number>;
    query: Record<string, string | number | string[] | number[]>;
    operation: {
        summary?: string;
        description?: string;
        tags?: string[];
        parameters: DeferencedOpenAPIParameter[];
    };
}
/** Process annotations and return all presets and remaining unannotated permissions */
export declare const processAnnotations: (permissions: readonly Permission[], annotations: readonly Annotation[], options?: {
    fetchPermissions?: (url: string) => Promise<Permission[]>;
    fetchSchema?: (url: string) => Promise<OpenAPIV3.Document>;
}) => Promise<{
    presets: Preset[];
    permissions: PermissionCoerced[];
}>;
export declare const resolveAnnotation: (annotation: Annotation, { fetchPermissions, fetchSchema, }: {
    fetchPermissions: (url: string) => Promise<Permission[]>;
    fetchSchema: (url: string) => Promise<OpenAPIBackend>;
}) => Promise<Preset | null>;
export {};
