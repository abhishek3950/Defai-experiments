"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.flattenCondition = void 0;
/**
 * Flattens a condition with nested children conditions into a breadth-first, flat array of conditions with parent index references.
 */
const flattenCondition = (root) => {
    const result = [];
    const queue = [{ condition: root, parent: 0 }];
    while (queue.length > 0) {
        const _a = queue.shift(), _b = _a.condition, { children } = _b, conditionFlat = __rest(_b, ["children"]), { parent } = _a;
        result.push(Object.assign(Object.assign({}, conditionFlat), { parent }));
        const index = result.length - 1;
        if (children) {
            for (const child of children) {
                queue.push({ condition: child, parent: index });
            }
        }
    }
    if (result.length > 256) {
        console.warn("Condition tree has more than 256 nodes. It will not be possible to apply this permission to the Roles mod.");
    }
    return result;
};
exports.flattenCondition = flattenCondition;
