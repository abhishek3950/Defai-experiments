import { Condition } from "zodiac-roles-deployments";
export type NormalizedCondition = Omit<Condition, "children"> & {
    /**
     * A unique ID that is derived from the normalized condition content.
     * As such it's useful for comparing conditions for equality.
     *
     * **Important: Whenever a condition is updated, its `$$id` field must be deleted.**
     **/
    $$id: string;
    children?: NormalizedCondition[];
};
/**
 * Transforms the structure of a condition without changing it semantics. Aims to minimize the tree size and to arrive at a normal form, so that semantically equivalent conditions will have an equal representation.
 * Such a normal form is useful for efficiently comparing conditions for equality. It is also promotes efficient, globally deduplicated storage of conditions since the Roles contract stores conditions in bytecode at addresses derived by hashing the condition data.
 **/
export declare const normalizeCondition: (condition: Condition | NormalizedCondition) => NormalizedCondition;
export declare const isNormalized: (condition: Condition) => condition is NormalizedCondition;
export declare const stripIds: (condition: NormalizedCondition) => Condition;
