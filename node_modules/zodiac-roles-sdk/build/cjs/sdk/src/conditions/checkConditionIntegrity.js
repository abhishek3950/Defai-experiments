"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkParameterTypeCompatibility = exports.checkRootConditionIntegrity = exports.checkConditionIntegrity = void 0;
const zodiac_roles_deployments_1 = require("zodiac-roles-deployments");
const checkConditionIntegrity = (condition) => {
    checkConsistentChildrenTypes(condition);
    checkConditionIntegrityRecursive(condition);
};
exports.checkConditionIntegrity = checkConditionIntegrity;
const checkRootConditionIntegrity = (condition) => {
    const rootType = checkConsistentChildrenTypes(condition);
    if (rootType !== zodiac_roles_deployments_1.ParameterType.Calldata) {
        throw new Error(`Root param type must be \`Calldata\`, got \`${zodiac_roles_deployments_1.ParameterType[rootType]}\``);
    }
    checkConditionIntegrityRecursive(condition);
};
exports.checkRootConditionIntegrity = checkRootConditionIntegrity;
/**
 * Validates that logical condition children have consistent types.
 * Since the children conditions address the very same value it does not make sense for them to declare incompatible param types.
 * */
const checkConsistentChildrenTypes = (condition) => {
    if (condition.paramType !== zodiac_roles_deployments_1.ParameterType.None) {
        return condition.paramType;
    }
    const [first, ...rest] = condition.children || [];
    const expectedType = first
        ? checkConsistentChildrenTypes(first)
        : zodiac_roles_deployments_1.ParameterType.None;
    rest.forEach((child) => {
        const childType = checkConsistentChildrenTypes(child);
        (0, exports.checkParameterTypeCompatibility)(expectedType, childType);
    });
    return expectedType;
};
const checkParameterTypeCompatibility = (left, right) => {
    if (right === zodiac_roles_deployments_1.ParameterType.None)
        return;
    if (right === left)
        return;
    if (right === zodiac_roles_deployments_1.ParameterType.Dynamic &&
        (left === zodiac_roles_deployments_1.ParameterType.Calldata || left === zodiac_roles_deployments_1.ParameterType.AbiEncoded)) {
        return;
    }
    if ((right === zodiac_roles_deployments_1.ParameterType.Calldata || right === zodiac_roles_deployments_1.ParameterType.AbiEncoded) &&
        left === zodiac_roles_deployments_1.ParameterType.Dynamic) {
        throw new Error(`Mixed children types: \`${zodiac_roles_deployments_1.ParameterType[right]}\` must appear before \`${zodiac_roles_deployments_1.ParameterType[left]}\``);
    }
    throw new Error(`Inconsistent children types (\`${zodiac_roles_deployments_1.ParameterType[left]}\` and \`${zodiac_roles_deployments_1.ParameterType[right]}\`)`);
};
exports.checkParameterTypeCompatibility = checkParameterTypeCompatibility;
const checkConditionIntegrityRecursive = (condition) => {
    var _a;
    (_a = condition.children) === null || _a === void 0 ? void 0 : _a.forEach(checkConditionIntegrityRecursive);
    checkParamTypeIntegrity(condition);
    checkCompValueIntegrity(condition);
    checkChildrenIntegrity(condition);
};
const checkParamTypeIntegrity = (condition) => {
    const COMPATIBLE_TYPES = {
        [zodiac_roles_deployments_1.Operator.Pass]: [
            zodiac_roles_deployments_1.ParameterType.Static,
            zodiac_roles_deployments_1.ParameterType.Dynamic,
            zodiac_roles_deployments_1.ParameterType.Tuple,
            zodiac_roles_deployments_1.ParameterType.Array,
            zodiac_roles_deployments_1.ParameterType.Calldata,
            zodiac_roles_deployments_1.ParameterType.AbiEncoded,
        ],
        [zodiac_roles_deployments_1.Operator.And]: [zodiac_roles_deployments_1.ParameterType.None],
        [zodiac_roles_deployments_1.Operator.Or]: [zodiac_roles_deployments_1.ParameterType.None],
        [zodiac_roles_deployments_1.Operator.Nor]: [zodiac_roles_deployments_1.ParameterType.None],
        [zodiac_roles_deployments_1.Operator.Matches]: [
            zodiac_roles_deployments_1.ParameterType.Calldata,
            zodiac_roles_deployments_1.ParameterType.AbiEncoded,
            zodiac_roles_deployments_1.ParameterType.Tuple,
            zodiac_roles_deployments_1.ParameterType.Array,
        ],
        [zodiac_roles_deployments_1.Operator.ArraySome]: [zodiac_roles_deployments_1.ParameterType.Array],
        [zodiac_roles_deployments_1.Operator.ArrayEvery]: [zodiac_roles_deployments_1.ParameterType.Array],
        [zodiac_roles_deployments_1.Operator.ArraySubset]: [zodiac_roles_deployments_1.ParameterType.Array],
        [zodiac_roles_deployments_1.Operator.EqualToAvatar]: [zodiac_roles_deployments_1.ParameterType.Static],
        [zodiac_roles_deployments_1.Operator.EqualTo]: [
            zodiac_roles_deployments_1.ParameterType.Static,
            zodiac_roles_deployments_1.ParameterType.Dynamic,
            zodiac_roles_deployments_1.ParameterType.Tuple,
            zodiac_roles_deployments_1.ParameterType.Array,
        ],
        [zodiac_roles_deployments_1.Operator.GreaterThan]: [zodiac_roles_deployments_1.ParameterType.Static],
        [zodiac_roles_deployments_1.Operator.LessThan]: [zodiac_roles_deployments_1.ParameterType.Static],
        [zodiac_roles_deployments_1.Operator.SignedIntGreaterThan]: [zodiac_roles_deployments_1.ParameterType.Static],
        [zodiac_roles_deployments_1.Operator.SignedIntLessThan]: [zodiac_roles_deployments_1.ParameterType.Static],
        [zodiac_roles_deployments_1.Operator.Bitmask]: [zodiac_roles_deployments_1.ParameterType.Static, zodiac_roles_deployments_1.ParameterType.Dynamic],
        [zodiac_roles_deployments_1.Operator.Custom]: [
            zodiac_roles_deployments_1.ParameterType.Static,
            zodiac_roles_deployments_1.ParameterType.Dynamic,
            zodiac_roles_deployments_1.ParameterType.Tuple,
            zodiac_roles_deployments_1.ParameterType.Array,
        ],
        [zodiac_roles_deployments_1.Operator.WithinAllowance]: [zodiac_roles_deployments_1.ParameterType.Static],
        [zodiac_roles_deployments_1.Operator.EtherWithinAllowance]: [zodiac_roles_deployments_1.ParameterType.None],
        [zodiac_roles_deployments_1.Operator.CallWithinAllowance]: [zodiac_roles_deployments_1.ParameterType.None],
    };
    const compatibleTypes = COMPATIBLE_TYPES[condition.operator];
    if (!compatibleTypes.includes(condition.paramType)) {
        throw new Error(`\`${zodiac_roles_deployments_1.Operator[condition.operator]}\` condition not supported for paramType \`${zodiac_roles_deployments_1.ParameterType[condition.paramType]}\``);
    }
};
const checkCompValueIntegrity = (condition) => {
    if (condition.operator >= zodiac_roles_deployments_1.Operator.EqualTo && !condition.compValue) {
        throw new Error(`\`${zodiac_roles_deployments_1.Operator[condition.operator]}\` condition must have a compValue`);
    }
    if (condition.operator < zodiac_roles_deployments_1.Operator.EqualTo && condition.compValue) {
        throw new Error(`\`${zodiac_roles_deployments_1.Operator[condition.operator]}\` condition cannot have a compValue`);
    }
};
const checkChildrenIntegrity = (condition) => {
    var _a, _b;
    if (condition.paramType === zodiac_roles_deployments_1.ParameterType.Tuple ||
        condition.paramType === zodiac_roles_deployments_1.ParameterType.Array) {
        if (!condition.children || condition.children.length === 0) {
            throw new Error(`Condition on \`${zodiac_roles_deployments_1.ParameterType[condition.paramType]}\` params must have children to describe the type structure, found violation in \`${zodiac_roles_deployments_1.Operator[condition.operator]}\` condition`);
        }
    }
    if (condition.operator === zodiac_roles_deployments_1.Operator.ArraySome ||
        condition.operator === zodiac_roles_deployments_1.Operator.ArrayEvery) {
        if (((_a = condition.children) === null || _a === void 0 ? void 0 : _a.length) !== 1) {
            throw new Error(`\`${zodiac_roles_deployments_1.Operator[condition.operator]}\` conditions must have exactly one child`);
        }
    }
    if (condition.operator === zodiac_roles_deployments_1.Operator.Matches ||
        condition.operator === zodiac_roles_deployments_1.Operator.ArraySubset) {
        if (!condition.children || condition.children.length === 0) {
            throw new Error(`\`${zodiac_roles_deployments_1.Operator[condition.operator]}\` conditions must have children`);
        }
    }
    if (condition.operator >= zodiac_roles_deployments_1.Operator.EqualToAvatar &&
        condition.operator !== zodiac_roles_deployments_1.Operator.Custom && // TODO Does this make sense? Can Custom have children?
        condition.paramType !== zodiac_roles_deployments_1.ParameterType.Calldata &&
        condition.paramType !== zodiac_roles_deployments_1.ParameterType.AbiEncoded &&
        condition.paramType !== zodiac_roles_deployments_1.ParameterType.Tuple &&
        condition.paramType !== zodiac_roles_deployments_1.ParameterType.Array) {
        if (condition.children && ((_b = condition.children) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            throw new Error(`\`${zodiac_roles_deployments_1.Operator[condition.operator]}\` condition on \`${zodiac_roles_deployments_1.ParameterType[condition.paramType]}\` type param must not have children`);
        }
    }
    if (condition.operator === zodiac_roles_deployments_1.Operator.And ||
        condition.operator === zodiac_roles_deployments_1.Operator.Or ||
        condition.operator === zodiac_roles_deployments_1.Operator.Nor) {
        if (!condition.children || condition.children.length === 0) {
            throw new Error(`\`${zodiac_roles_deployments_1.Operator[condition.operator]}\` condition must have children`);
        }
    }
};
