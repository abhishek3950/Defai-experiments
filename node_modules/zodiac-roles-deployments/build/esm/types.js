export var ExecutionOptions;
(function (ExecutionOptions) {
    ExecutionOptions[ExecutionOptions["None"] = 0] = "None";
    ExecutionOptions[ExecutionOptions["Send"] = 1] = "Send";
    ExecutionOptions[ExecutionOptions["DelegateCall"] = 2] = "DelegateCall";
    ExecutionOptions[ExecutionOptions["Both"] = 3] = "Both";
})(ExecutionOptions || (ExecutionOptions = {}));
export var Clearance;
(function (Clearance) {
    Clearance[Clearance["None"] = 0] = "None";
    Clearance[Clearance["Target"] = 1] = "Target";
    Clearance[Clearance["Function"] = 2] = "Function";
})(Clearance || (Clearance = {}));
export var ParameterType;
(function (ParameterType) {
    ParameterType[ParameterType["None"] = 0] = "None";
    ParameterType[ParameterType["Static"] = 1] = "Static";
    ParameterType[ParameterType["Dynamic"] = 2] = "Dynamic";
    ParameterType[ParameterType["Tuple"] = 3] = "Tuple";
    ParameterType[ParameterType["Array"] = 4] = "Array";
    ParameterType[ParameterType["Calldata"] = 5] = "Calldata";
    ParameterType[ParameterType["AbiEncoded"] = 6] = "AbiEncoded";
})(ParameterType || (ParameterType = {}));
export var Operator;
(function (Operator) {
    // 00:    EMPTY EXPRESSION (default, always passes)
    //          paramType: Static / Dynamic / Tuple / Array
    //          ‚ùì children (only for paramType: Tuple / Array to describe their structure)
    //          üö´ compValue
    Operator[Operator["Pass"] = 0] = "Pass";
    // ------------------------------------------------------------
    // 01-04: LOGICAL EXPRESSIONS
    //          paramType: None
    //          ‚úÖ children
    //          üö´ compValue
    Operator[Operator["And"] = 1] = "And";
    Operator[Operator["Or"] = 2] = "Or";
    Operator[Operator["Nor"] = 3] = "Nor";
    // ------------------------------------------------------------
    // 05-14: COMPLEX EXPRESSIONS
    //          paramType: Calldata / AbiEncoded / Tuple / Array,
    //          ‚úÖ children
    //          üö´ compValue
    Operator[Operator["Matches"] = 5] = "Matches";
    Operator[Operator["ArraySome"] = 6] = "ArraySome";
    Operator[Operator["ArrayEvery"] = 7] = "ArrayEvery";
    Operator[Operator["ArraySubset"] = 8] = "ArraySubset";
    // ------------------------------------------------------------
    // 15:    SPECIAL COMPARISON (without compValue)
    //          paramType: Static
    //          üö´ children
    //          üö´ compValue
    Operator[Operator["EqualToAvatar"] = 15] = "EqualToAvatar";
    // ------------------------------------------------------------
    // 16-31: COMPARISON EXPRESSIONS
    //          paramType: Static / Dynamic / Tuple / Array
    //          üö´ children
    //          ‚úÖ compValue
    Operator[Operator["EqualTo"] = 16] = "EqualTo";
    Operator[Operator["GreaterThan"] = 17] = "GreaterThan";
    Operator[Operator["LessThan"] = 18] = "LessThan";
    Operator[Operator["SignedIntGreaterThan"] = 19] = "SignedIntGreaterThan";
    Operator[Operator["SignedIntLessThan"] = 20] = "SignedIntLessThan";
    Operator[Operator["Bitmask"] = 21] = "Bitmask";
    Operator[Operator["Custom"] = 22] = "Custom";
    Operator[Operator["WithinAllowance"] = 28] = "WithinAllowance";
    Operator[Operator["EtherWithinAllowance"] = 29] = "EtherWithinAllowance";
    Operator[Operator["CallWithinAllowance"] = 30] = "CallWithinAllowance";
})(Operator || (Operator = {}));
export var Status;
(function (Status) {
    Status[Status["Ok"] = 0] = "Ok";
    /** Role not allowed to delegate call to target address */
    Status[Status["DelegateCallNotAllowed"] = 1] = "DelegateCallNotAllowed";
    /** Role not allowed to call target address */
    Status[Status["TargetAddressNotAllowed"] = 2] = "TargetAddressNotAllowed";
    /** Role not allowed to call this function on target address */
    Status[Status["FunctionNotAllowed"] = 3] = "FunctionNotAllowed";
    /** Role not allowed to send to target address */
    Status[Status["SendNotAllowed"] = 4] = "SendNotAllowed";
    /** Or condition not met */
    Status[Status["OrViolation"] = 5] = "OrViolation";
    /** Nor condition not met */
    Status[Status["NorViolation"] = 6] = "NorViolation";
    /** Parameter value is not equal to allowed */
    Status[Status["ParameterNotAllowed"] = 7] = "ParameterNotAllowed";
    /** Parameter value less than allowed */
    Status[Status["ParameterLessThanAllowed"] = 8] = "ParameterLessThanAllowed";
    /** Parameter value greater than maximum allowed by role */
    Status[Status["ParameterGreaterThanAllowed"] = 9] = "ParameterGreaterThanAllowed";
    /** Parameter value does not match */
    Status[Status["ParameterNotAMatch"] = 10] = "ParameterNotAMatch";
    /** Array elements do not meet allowed criteria for every element */
    Status[Status["NotEveryArrayElementPasses"] = 11] = "NotEveryArrayElementPasses";
    /** Array elements do not meet allowed criteria for at least one element */
    Status[Status["NoArrayElementPasses"] = 12] = "NoArrayElementPasses";
    /** Parameter value not a subset of allowed */
    Status[Status["ParameterNotSubsetOfAllowed"] = 13] = "ParameterNotSubsetOfAllowed";
    /** Bitmask exceeded value length */
    Status[Status["BitmaskOverflow"] = 14] = "BitmaskOverflow";
    /** Bitmask not an allowed value */
    Status[Status["BitmaskNotAllowed"] = 15] = "BitmaskNotAllowed";
    Status[Status["CustomConditionViolation"] = 16] = "CustomConditionViolation";
    Status[Status["AllowanceExceeded"] = 17] = "AllowanceExceeded";
    Status[Status["CallAllowanceExceeded"] = 18] = "CallAllowanceExceeded";
    Status[Status["EtherAllowanceExceeded"] = 19] = "EtherAllowanceExceeded";
})(Status || (Status = {}));
