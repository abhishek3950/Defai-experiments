import { chains } from "./chains";
export type ChainId = keyof typeof chains;
export declare enum ExecutionOptions {
    None = 0,
    Send = 1,
    DelegateCall = 2,
    Both = 3
}
export declare enum Clearance {
    None = 0,
    Target = 1,
    Function = 2
}
export declare enum ParameterType {
    None = 0,
    Static = 1,
    Dynamic = 2,
    Tuple = 3,
    Array = 4,
    Calldata = 5,
    AbiEncoded = 6
}
export declare enum Operator {
    Pass = 0,
    And = 1,
    Or = 2,
    Nor = 3,
    Matches = 5,
    ArraySome = 6,
    ArrayEvery = 7,
    ArraySubset = 8,
    EqualToAvatar = 15,
    EqualTo = 16,// paramType: Static / Dynamic / Tuple / Array
    GreaterThan = 17,// paramType: Static
    LessThan = 18,// paramType: Static
    SignedIntGreaterThan = 19,// paramType: Static
    SignedIntLessThan = 20,// paramType: Static
    Bitmask = 21,// paramType: Static / Dynamic
    Custom = 22,// paramType: Static / Dynamic / Tuple / Array
    WithinAllowance = 28,// paramType: Static
    EtherWithinAllowance = 29,// paramType: None
    CallWithinAllowance = 30
}
export declare enum Status {
    Ok = 0,
    /** Role not allowed to delegate call to target address */
    DelegateCallNotAllowed = 1,
    /** Role not allowed to call target address */
    TargetAddressNotAllowed = 2,
    /** Role not allowed to call this function on target address */
    FunctionNotAllowed = 3,
    /** Role not allowed to send to target address */
    SendNotAllowed = 4,
    /** Or condition not met */
    OrViolation = 5,
    /** Nor condition not met */
    NorViolation = 6,
    /** Parameter value is not equal to allowed */
    ParameterNotAllowed = 7,
    /** Parameter value less than allowed */
    ParameterLessThanAllowed = 8,
    /** Parameter value greater than maximum allowed by role */
    ParameterGreaterThanAllowed = 9,
    /** Parameter value does not match */
    ParameterNotAMatch = 10,
    /** Array elements do not meet allowed criteria for every element */
    NotEveryArrayElementPasses = 11,
    /** Array elements do not meet allowed criteria for at least one element */
    NoArrayElementPasses = 12,
    /** Parameter value not a subset of allowed */
    ParameterNotSubsetOfAllowed = 13,
    /** Bitmask exceeded value length */
    BitmaskOverflow = 14,
    /** Bitmask not an allowed value */
    BitmaskNotAllowed = 15,
    CustomConditionViolation = 16,
    AllowanceExceeded = 17,
    CallAllowanceExceeded = 18,
    EtherAllowanceExceeded = 19
}
export interface Role {
    key: `0x${string}`;
    members: `0x${string}`[];
    targets: Target[];
    annotations: Annotation[];
    lastUpdate: number;
}
export interface Target {
    address: `0x${string}`;
    clearance: Clearance;
    executionOptions: ExecutionOptions;
    functions: readonly Function[];
}
export interface Function {
    selector: `0x${string}`;
    executionOptions: ExecutionOptions;
    wildcarded: boolean;
    condition?: Condition;
}
export interface Condition {
    paramType: ParameterType;
    operator: Operator;
    compValue?: `0x${string}`;
    children?: readonly Condition[];
}
export interface Allowance {
    key: `0x${string}`;
    refill: bigint;
    maxRefill: bigint;
    period: bigint;
    balance: bigint;
    timestamp: bigint;
}
export interface Annotation {
    /** The URI serves as ID for the annotation. An http get request will be made to fetch the targeted permissions. */
    uri: string;
    /** The OpenAPI schema that describes the API endpoint at uri. */
    schema: string;
}
