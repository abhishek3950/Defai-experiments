import { Allowance, ChainId, Clearance, ExecutionOptions } from "./types";
type Props = {
    address: `0x${string}`;
} & ({
    /** pass a chainId to use query against a dev subgraph */
    chainId: ChainId;
} | {
    /** pass your own subgraph endpoint for production use */
    subgraph: string;
});
type FetchOptions = Omit<RequestInit, "method" | "body">;
export declare const fetchRolesMod: ({ address, ...rest }: Props, options?: FetchOptions) => Promise<RolesModifier | null>;
interface TargetSummary {
    address: `0x${string}`;
    clearance: Clearance;
    executionOptions: ExecutionOptions;
    functions: {
        selector: `0x${string}`;
        wildcarded: boolean;
        executionOptions: ExecutionOptions;
    }[];
}
export interface RoleSummary {
    key: `0x${string}`;
    members: `0x${string}`[];
    targets: TargetSummary[];
}
export interface RolesModifier {
    address: `0x${string}`;
    owner: `0x${string}`;
    avatar: `0x${string}`;
    target: `0x${string}`;
    roles: RoleSummary[];
    allowances: Allowance[];
    multiSendAddresses: `0x${string}`[];
}
export {};
